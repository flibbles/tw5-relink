caption: Macros
tags: Documentation Construct
title: Macros

//Relink// will relink macro parameters. It doesn't matter if you call them the `<<pretty>>` way or the `<$macrocall>` way. Nor does it matter if your macros are global through <<tag $:/tags/Macro>>, imported through `\import`, or defined in a macro module. //Relink// handles it all.

...but //Relink// only updates parameters that have been explicitly whitelisted. All core macro parameters are already configured by default [[with their correct types|Types]], but what if you create your own macros?

Lets say you design your own macro to print out a fellowship and its members, like:

```
\define fellowship(name, members)
!!! <$link to=<<__name__>> />
<$list filter=<<__members__>> />
\end
```

If you call that macro, like `<<fellowship "Ring Deliverers" "[tag[LotR Character]]">>`, //Relink// won't touch those parameters by default. You have to declare their type first.

There are two ways to do this.

* ''[[Inline Declarations]]:'' This uses the `\relink` pragma. It's good for homebrew macros, or macros which have a limited scope (those not made global with <<tag $:/tags/Macro>>).
* ''[[Whitelisting]]:'' If you add an entry to the whitelist, like `fellowship`/`name` set to 'title'. And `fellowship`/`members` set to filter. This is good for javascript macros, or macros defined by a plugin you're writing.

<<link-to-tab Demo Demo/Macros Demo>>
