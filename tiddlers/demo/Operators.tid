caption: Operators
tags: Documentation Construct
title: Operators

\rules except wikilink
Whenever a filter is processed by Relink, whether in a field, an attribute, or a filtered transclude expression, it will only update the operands of whitelisted operators. Each operator must be configured a particular [[type|Types]].

''Suffixes'' can optionally be a part of a whitelist configuration. Let's say you whitelist the operator `myOperator:mySuffix`. The only instances of //myOperator//'s which will be updated are when they have the suffix //mySuffix//.

However, if you whitelisted just `myOperator`, then its operand will update regardless of whether it's `[myOperator[myTitle]]` or `[myOperator:someSuffix[myTitle]]` or whatever. The suffix is ignored.

`[field:title[]]` is another good example. It's a default configuration which will only update //field// if it's suffix is set to //title//.

!!! Defaults

`tag`, `title`, and `field:title` are whitelisted by default. That means on rename //MyTiddler// -> //New Tiddler//:

`[title[MyTiddler]] [tag[MyTiddler]!field:title[MyTiddler]]`

becomes

`[title[New Tiddler]] [tag[New Tiddler]!field:title[New Tiddler]]`

''Multi-operand operators'' are supported in Tiddlywiki >=V5.1.23. Currently, there are only a couple core operators that utilize that, and //none// of them are relevant to relinking.

However, if you want to create relinkable operators, you can. Say you have an operator `myop` which takes tiddler titles for its first operand, and a reference for its second. You would put the following entries into the whitelist:

* `myop/1` => `title`
* `myop/2` => `reference`

Thus, the filter `[myop[myTitle],[myTitle!!field]]` will update both operands if "myTitle" is renamed.

`myop/1` => `title` is equivalent to `myop` => `title` since the first operand is the default operand. However, defining both `myop` and `myop/1` is unsupported and results in undefined behavior.

<<link-to-tab Demo Demo/Filters Demo>>
