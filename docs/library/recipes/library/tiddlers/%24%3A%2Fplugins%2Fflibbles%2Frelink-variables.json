{
"name":"Relink Variables",
"title":"$:/plugins/flibbles/relink-variables",
"description":"Reports and renames variables such as `\\procedure` or `\\function`",
"author":"Flibbles",
"version":"2.4.1",
"core-version":">=5.1.22",
"parent-plugin":"$:/plugins/flibbles/relink",
"source":"https://github.com/flibbles/tw5-relink",
"demo":"http://flibbles.github.io/tw5-relink/",
"list":"readme",
"dependents":"",
"plugin-type":"plugin",
"type":"application/json",
"text":"{\"tiddlers\":{\"$:/plugins/flibbles/relink-variables/TiddlerInfo/References\":{\"title\":\"$:/plugins/flibbles/relink-variables/TiddlerInfo/References\",\"caption\":\"{{$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Caption}}\",\"list-after\":\"$:/plugins/flibbles/relink/ui/TiddlerInfo/References\",\"tags\":\"$:/tags/TiddlerInfo\",\"text\":\"\\\\whitespace trim\\n\\n<table class=\\\"tc-relink-references-table\\\">\\n<$vars\\n\\t.relink-variables-containingTiddler=<<currentTiddler>>\\n\\t.relink-variables-filter=\\\"[all[current]relink:backreferences[]!prefix[$:/temp/]sort[title]]\\\"\\n\\t.relink-variables-filter-to=\\\"[all[current]get[text]!match[]!search:title:literal[ ]!search:title[(]else<.relink-variables-variable>addprefix<.relink-variables-prefix>]\\\"\\n\\t.relink-variables-default={{{ [all[current]relink:variables[]nth[6]then[hide]else[show]] }}}\\n\\t.relink-variables-prefix={{{ [[$:/temp/flibbles/relink-variables/]addsuffix<currentTiddler>addsuffix[ ]] }}}>\\n<$list\\n\\tvariable=.relink-variables-variable\\n\\tfilter=\\\"[all[current]relink:variables[]]\\\"\\n\\temptyMessage={{$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Empty}}>\\n<tbody>\\n<$tiddler tiddler={{{ [<.relink-variables-prefix>addsuffix<.relink-variables-variable>] }}}>\\n<$qualify title={{{ [<currentTiddler>addprefix[$:/state/flibbles/relink-variables/info/]] }}} name=\\\".relink-variables-state\\\">\\n<$vars\\n\\t.relink-variables-count={{{ [subfilter<.relink-variables-filter>relink:report<currentTiddler>count[]]  }}}>\\n<tr>\\n<th colspan=2 class=\\\"tc-relink-variables\\\">\\n<$button class=\\\"tc-btn-invisible tc-btn-dropdown\\\" set=<<.relink-variables-state>> setTo={{{ [<.relink-variables-state>get[text]else<.relink-variables-default>match[show]then[hide]else[show]] }}} >\\n<$reveal type=nomatch state=<<.relink-variables-state>> text=show default=<<.relink-variables-default>>>\\n{{$:/core/images/right-arrow}}\\n</$reveal>\\n<$reveal type=match state=<<.relink-variables-state>> text=show default=<<.relink-variables-default>>>\\n{{$:/core/images/down-arrow}}\\n</$reveal>\\n&#32;\\n<$list filter=\\\"[all[current]is[tiddler]]\\\" emptyMessage=\\\"\\\"\\\"\\\\whitespace trim\\n\\t''<$text text=<<.relink-variables-variable>> />''\\n\\t&#32;\\n\\t<span class=tc-relink-variables-count>(<$text text=<<.relink-variables-count>> />)</span>\\n\\t<$list variable=.relink-editable filter=\\\"[<.relink-variables-containingTiddler>is[tiddler]!type[application/javascript]]\\\">\\n\\t&#32;\\n\\t<$button\\n\\t\\ttooltip={{$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Edit/Hint}}\\n\\t\\taria-label={{$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Edit/Caption}}\\n\\t\\tclass=<<tv-config-toolbar-class>>>\\n\\t<$action-createtiddler $basetitle=<<currentTiddler>> text=<<.relink-variables-variable>> />\\n\\t{{$:/core/images/edit-button}}\\n\\t</$button>\\n\\t</$list>\\n\\\"\\\"\\\" >\\n\\t<$vars\\n\\t\\tdone-actions=\\\"\\\"\\\"\\\\whitespace trim\\n\\t\\t\\t<$action-sendmessage\\n\\t\\t\\t\\t$message=tm-relink-tiddler\\n\\t\\t\\t\\tfrom=<<currentTiddler>>\\n\\t\\t\\t\\tto={{{ [all[current]removesuffix<.relink-variables-variable>addsuffix{!!text}] }}} />\\n\\t\\t<$action-deletetiddler $tiddler=<<currentTiddler>> />\\n\\t\\\"\\\"\\\">\\n\\t<$keyboard actions=<<done-actions>> key=enter>\\n\\t<$keyboard actions=\\\"<$action-deletetiddler $tiddler=<<currentTiddler>> />\\\" key=escape>\\n\\t<$button class=\\\"tc-btn-invisible tc-btn-dropdown\\\" message=tm-focus-selector>\\n\\t\\t<$edit-text tiddler=<<currentTiddler>> tag=input focus=yes/>\\n\\t</$button>\\n\\t&#32;\\n\\t<$button\\n\\t\\ttooltip={{$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Cancel/Hint}}\\n\\t\\taria-label={{$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Cancel/Caption}}\\n\\t\\tclass=<<tv-config-toolbar-class>>>\\n\\t<$action-deletetiddler $tiddler=<<currentTiddler>> />\\n\\t{{$:/core/images/cancel-button}}\\n\\t</$button>\\n\\t&#32;\\n\\t<$button\\n\\t\\tactions=<<done-actions>>\\n\\t\\ttooltip={{$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Save/Hint}}\\n\\t\\taria-label={{$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Save/Caption}}\\n\\t\\tclass=<<tv-config-toolbar-class>>\\n\\t\\tdisabled={{{ [{!!text}!match[]!match<.relink-variables-variable>!search:title:literal[ ]!search:title:literal[(]then[no]else[yes]] }}} >\\n\\t{{$:/core/images/done-button}}\\n\\t</$button>\\n\\t</$keyboard>\\n\\t</$keyboard>\\n\\t</$vars>\\n\\t&#32;\\n\\t<$list variable=existing filter=\\\"[variables[]match{!!text}!match[]] -[<.relink-variables-variable>]\\\">\\n\\t\\t{{$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Exists/Prompt}}:\\n\\t\\t<$list filter=\\\"[all[tiddlers+shadows]] :filter[relink:variables[]match<existing>]\\\">\\n\\t\\t\\t&#32;\\n\\t\\t\\t<$link />\\n\\t\\t</$list>\\n\\t</$list>\\n\\t<$vars toTitle={{{ [subfilter<.relink-variables-filter-to>] }}}>\\n\\t\\t<$list variable=changedTiddler filter=\\\"[relink:impossible<toTitle>first[]]\\\">\\n\\t\\t\\t{{$:/language/EditTemplate/Title/Impossibles/Prompt}}\\n\\t\\t</$list>\\n\\t</$vars>\\n</$list>\\n</$button>\\n</th>\\n</tr>\\n\\n<$list variable=\\\".relink-variables-show\\\" filter=\\\"[<.relink-variables-state>get[text]else<.relink-variables-default>match[show]]\\\">\\n<$vars toTitle={{{ [subfilter<.relink-variables-filter-to>] }}}>\\n<$list\\n\\tfilter=\\\"[all[current]relink:backreferences[]!prefix[$:/temp/]sort[title]]\\\"\\n\\tvariable=\\\"listItem\\\"\\n\\ttemplate=\\\"$:/plugins/flibbles/relink/ui/TiddlerInfo/ReferencesTemplate\\\">\\n</$vars>\\n\"},\"$:/config/flibbles/relink/attributes/$macrocall/$name\":{\"title\":\"$:/config/flibbles/relink/attributes/$macrocall/$name\",\"text\":\"variable\"},\"$:/config/flibbles/relink/attributes/$transclude/$variable\":{\"title\":\"$:/config/flibbles/relink/attributes/$transclude/$variable\",\"text\":\"variable\"},\"$:/plugins/flibbles/relink-variables/def.js\":{\"title\":\"$:/plugins/flibbles/relink-variables/def.js\",\"text\":\"/*\\\\\\nmodule-type: relinkdef\\ntitle: $:/plugins/flibbles/relink-variables/def.js\\ntype: application/javascript\\n\\n\\\\*/\\n\\nvar utils = require(\\\"$:/plugins/flibbles/relink/js/utils.js\\\");\\nvar varRelinker = utils.getType('variable');\\n\\n\\nexports.name = 'variables';\\n\\nexports.report = function() {\\n\\t// While we'll relink definition names, we don't actually\\n\\t// report on them since that would be redundant.\\n\\t// The user is looking at the definition to see what's referencing it.\\n};\\n\\nexports.relink = function(definition, fromTitle, toTitle, options) {\\n\\t// We skip the immediate context, because that's THIS definition\\n\\tvar tiddler = options.settings.parent.getFocus().title;\\n\\tif (tiddler) {\\n\\t\\tvar entry = varRelinker.relinkForTitle(definition.name, fromTitle, toTitle, tiddler);\\n\\t\\tif (entry && entry.output) {\\n\\t\\t\\tdefinition.name = entry.output;\\n\\t\\t\\tentry.output = true;\\n\\t\\t}\\n\\t\\treturn entry;\\n\\t}\\n};\\n\",\"module-type\":\"relinkdef\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink-variables/fieldtype.js\":{\"title\":\"$:/plugins/flibbles/relink-variables/fieldtype.js\",\"text\":\"/*\\\\\\nmodule-type: relinkfieldtype\\ntitle: $:/plugins/flibbles/relink-variables/fieldtype.js\\ntype: application/javascript\\n\\nThis manages the variable type, which is like list, wikitext, markdown, etc...\\nExcept that this type points to a variable, not a tiddler.\\n\\n\\\\*/\\n\\nvar systemPrefix = \\\"$:/temp/flibbles/relink-variables/\\\";\\n\\nexports.name = 'variable';\\n\\nexports.report = function(value, callback, options) {\\n\\tvar def = options.settings.getMacroDefinition(value);\\n\\tif (def && def.tiddler) {\\n\\t\\t// variable reports are soft, because the made-up tiddlers that act as\\n\\t\\t// directives for the variable shouldn't flood the \\\"Missing\\\" panel.\\n\\t\\tcallback(systemPrefix + def.tiddler + ' ' + value, undefined, {soft: true});\\n\\t}\\n};\\n\\nexports.reportForTitle = function(value, callback, defTitle) {\\n\\tcallback(systemPrefix + defTitle + ' ' + value, undefined, {soft: true});\\n};\\n\\nexports.relink = function(value, fromTitle, toTitle, options) {\\n\\tvar def = options.settings.getMacroDefinition(value);\\n\\tif (def) {\\n\\t\\treturn this.relinkForTitle(value, fromTitle, toTitle, def.tiddler);\\n\\t}\\n};\\n\\nexports.relinkForTitle = function(value, fromTitle, toTitle, defTitle) {\\n\\tvar prefix = systemPrefix + defTitle + ' ';\\n\\tif (fromTitle === prefix + value) {\\n\\t\\tif (toTitle.substr(0, prefix.length) !== prefix\\n\\t\\t|| toTitle.indexOf(' ', prefix.length) >= 0\\n\\t\\t|| toTitle.indexOf('(', prefix.length) >= 0) {\\n\\t\\t\\treturn {impossible: true};\\n\\t\\t} else {\\n\\t\\t\\treturn {output: toTitle.substr(prefix.length)};\\n\\t\\t}\\n\\t}\\n};\\n\",\"module-type\":\"relinkfieldtype\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink-variables/filter.js\":{\"title\":\"$:/plugins/flibbles/relink-variables/filter.js\",\"text\":\"/*\\\\\\nmodule-type: relinkfilter\\ntitle: $:/plugins/flibbles/relink-variables/filter.js\\ntype: application/javascript\\n\\nTakes care of relinking functions used in filters (i.e. [my.func[]])\\n\\n\\\\*/\\n\\nvar utils = require(\\\"$:/plugins/flibbles/relink/js/utils.js\\\");\\nvar varRelinker = utils.getType('variable');\\n\\nexports.name = \\\"variables\\\";\\n\\nexports.report = function(filterParseTree, callback, options) {\\n\\tforEachFunctionOperator(filterParseTree, options, function(operator, def) {\\n\\t\\tvarRelinker.reportForTitle(operator.operator, function(title, blurb, style) {\\n\\t\\t\\tblurb = formBlurb(operator, 33);\\n\\t\\t\\tif (blurb.length > 50) {\\n\\t\\t\\t\\tblurb = formBlurb(operator, 18);\\n\\t\\t\\t}\\n\\t\\t\\tif (blurb.length > 50) {\\n\\t\\t\\t\\tblurb = formBlurb(operator);\\n\\t\\t\\t}\\n\\t\\t\\tcallback(title, blurb, style);\\n\\t\\t}, def.tiddler);\\n\\t});\\n};\\n\\nexports.relink = function(filterParseTree, fromTitle, toTitle, options) {\\n\\tvar output = {};\\n\\tforEachFunctionOperator(filterParseTree, options, function(operator, def) {\\n\\t\\tvar entry = varRelinker.relinkForTitle(operator.operator, fromTitle, toTitle, def.tiddler);\\n\\t\\tif (entry) {\\n\\t\\t\\tif (entry.output) {\\n\\t\\t\\t\\tif (entry.output.indexOf('.') < 0\\n\\t\\t\\t\\t|| entry.output.search(/[\\\\[\\\\{<\\\\/]/) >= 0) {\\n\\t\\t\\t\\t\\toutput.impossible = true;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\toperator.operator = entry.output;\\n\\t\\t\\t\\t\\toutput.changed = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (entry.impossible) {\\n\\t\\t\\t\\toutput.impossible = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\treturn output;\\n};\\n\\nfunction forEachFunctionOperator(filterParseTree, options, method) {\\n\\tfor (var i = 0; i < filterParseTree.length; i++) {\\n\\t\\tvar run = filterParseTree[i];\\n\\t\\tfor (var j = 0; j < run.operators.length; j++) {\\n\\t\\t\\tvar operator = run.operators[j];\\n\\t\\t\\tif (operator.operator.indexOf('.') >= 0) {\\n\\t\\t\\t\\tvar def = options.settings.getMacroDefinition(operator.operator);\\n\\t\\t\\t\\tif (def && def.isFunctionDefinition) {\\n\\t\\t\\t\\t\\tmethod(operator, def);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n};\\n\\nfunction formBlurb(operator, maxLength) {\\n\\tvar blurb = [];\\n\\tfor (var i = 0; i < operator.operands.length; i++) {\\n\\t\\tvar operand = operator.operands[i];\\n\\t\\tif (operand.indirect) {\\n\\t\\t\\tblurb.push('{' + operand.text + '}');\\n\\t\\t} else if (operand.variable) {\\n\\t\\t\\tblurb.push('<' + utils.abridgeString(operand.text, maxLength) + '>');\\n\\t\\t} else if (operand.text) {\\n\\t\\t\\tblurb.push('[' + utils.abridgeString(operand.text, maxLength) + ']');\\n\\t\\t} else {\\n\\t\\t\\tblurb.push('');\\n\\t\\t}\\n\\t}\\n\\treturn '[' + blurb.join(',') + ']';\\n};\\n\",\"module-type\":\"relinkfilter\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink-variables/html.js\":{\"title\":\"$:/plugins/flibbles/relink-variables/html.js\",\"text\":\"/*\\\\\\nmodule-type: relinkhtml\\ntitle: $:/plugins/flibbles/relink-variables/html.js\\ntype: application/javascript\\n\\nRelinks \\\\widgets in their html element form. (i.e. <$my.widget />)\\n\\n\\\\*/\\n\\nvar utils = require(\\\"$:/plugins/flibbles/relink/js/utils.js\\\");\\nvar varRelinker = utils.getType('variable');\\n\\nexports.name = 'variables';\\n\\nexports.report = function(element, parser, callback, options) {\\n\\tif (element.tag.indexOf('.') >= 0 && element.tag[0] === '$') {\\n\\t\\tvar def = options.settings.getMacroDefinition(element.tag);\\n\\t\\tif (def && def.isWidgetDefinition) {\\n\\t\\t\\tvarRelinker.reportForTitle(element.tag, function(title, blurb, style) {\\n\\t\\t\\t\\tblurb = formBlurb(element, 33);\\n\\t\\t\\t\\tif (blurb.length > 60) {\\n\\t\\t\\t\\t\\tblurb = formBlurb(element, 18);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (blurb.length > 60) {\\n\\t\\t\\t\\t\\tblurb = formBlurb(element);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcallback(title, blurb, style);\\n\\t\\t\\t}, def.tiddler);\\n\\t\\t}\\n\\t}\\n};\\n\\nexports.relink = function(element, parser, fromTitle, toTitle, options) {\\n\\tvar output;\\n\\tif (element.tag.indexOf('.') >= 0 && element.tag[0] === '$') {\\n\\t\\tvar def = options.settings.getMacroDefinition(element.tag);\\n\\t\\tif (def && def.isWidgetDefinition) {\\n\\t\\t\\tvar entry = varRelinker.relinkForTitle(element.tag, fromTitle, toTitle, def.tiddler);\\n\\t\\t\\tif (entry) {\\n\\t\\t\\t\\toutput = output || {};\\n\\t\\t\\t\\tif (entry.output) {\\n\\t\\t\\t\\t\\tif (entry.output[0] !== '$'\\n\\t\\t\\t\\t\\t|| entry.output.indexOf('.') < 0\\n\\t\\t\\t\\t\\t|| entry.output.search(/[^a-zA-Z\\\\-\\\\$\\\\.]/) >= 0) {\\n\\t\\t\\t\\t\\t\\toutput.impossible = true;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\telement.tag = entry.output;\\n\\t\\t\\t\\t\\t\\toutput.output = true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (entry.impossible) {\\n\\t\\t\\t\\t\\toutput.impossible = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn output;\\n};\\n\\nfunction wrapValue(value) {\\n\\tif (!/([\\\\/\\\\s<>\\\"'`=])/.test(value) && value.length > 0) {\\n\\t\\treturn value;\\n\\t} else if (value.indexOf('\\\"') < 0) {\\n\\t\\treturn '\\\"' + value + '\\\"';\\n\\t} else {\\n\\t\\treturn '\\\\'' + value + '\\\\'';\\n\\t}\\n};\\n\\nfunction formBlurb(element, maxLength) {\\n\\tvar blurb = '';\\n\\tvar attrs = element.orderedAttributes;\\n\\tfor (var i = 0; i < attrs.length; i++) {\\n\\t\\tvar attr = attrs[i];\\n\\t\\tblurb += ' ' + attr.name + '=';\\n\\t\\tswitch (attr.type) {\\n\\t\\tcase 'string':\\n\\t\\t\\tblurb += wrapValue(utils.abridgeString(attr.value, maxLength));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'indirect':\\n\\t\\t\\tblurb += '{{' + attr.textReference + '}}';\\n\\t\\t\\tbreak;\\n\\t\\tcase 'filtered':\\n\\t\\t\\tblurb += '{{{' + utils.abridgeString(attr.filter.trim(), maxLength) + '}}}';\\n\\t\\t\\tbreak;\\n\\t\\tcase 'macro':\\n\\t\\t\\tblurb += '<<' + attr.value.name + '>>';\\n\\t\\t\\tbreak;\\n\\t\\tcase 'substituted':\\n\\t\\t\\tblurb += '`' + utils.abridgeString(attr.rawValue, maxLength) + '`';\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\treturn blurb;\\n};\\n\",\"module-type\":\"relinkhtml\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Caption\":{\"title\":\"$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Caption\",\"text\":\"//Relink// Variables\"},\"$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Description\":{\"title\":\"$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Description\",\"text\":\"The following are variables any the tiddlers that contain invocations of them:\"},\"$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Exists/Prompt\":{\"title\":\"$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Exists/Prompt\",\"text\":\"''Warning:'' This variable appears to already exist\"},\"$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Empty\":{\"title\":\"$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Empty\",\"text\":\"This tiddler does not contain any importable variables\"},\"$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Cancel/Caption\":{\"title\":\"$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Cancel/Caption\",\"text\":\"cancel\"},\"$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Cancel/Hint\":{\"title\":\"$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Cancel/Hint\",\"text\":\"Cancel rename to this variable\"},\"$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Edit/Caption\":{\"title\":\"$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Edit/Caption\",\"text\":\"edit\"},\"$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Edit/Hint\":{\"title\":\"$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Edit/Hint\",\"text\":\"Edit this variable\"},\"$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Save/Caption\":{\"title\":\"$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Save/Caption\",\"text\":\"ok\"},\"$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Save/Hint\":{\"title\":\"$:/plugins/flibbles/relink-variables/language/TiddlerInfo/Save/Hint\",\"text\":\"Confirm update to this variable name\"},\"$:/plugins/flibbles/relink-variables/macrocall.js\":{\"title\":\"$:/plugins/flibbles/relink-variables/macrocall.js\",\"text\":\"/*\\\\\\nmodule-type: relinkmacrocall\\ntitle: $:/plugins/flibbles/relink-variables/macrocall.js\\ntype: application/javascript\\n\\nHandles relinking of variables in <<macrocall>> format.\\n\\n\\\\*/\\n\\nvar utils = require(\\\"$:/plugins/flibbles/relink/js/utils.js\\\");\\nvar varRelinker = utils.getType('variable');\\n\\nexports.name = 'variables';\\n\\nexports.report = function(context, macro, callback, options) {\\n\\tvarRelinker.report(macro.name, function(title, blurb, style) {\\n\\t\\tvar blurb = formBlurb(macro, 33);\\n\\t\\tif (blurb.length > 50) {\\n\\t\\t\\tblurb = formBlurb(macro, 18);\\n\\t\\t}\\n\\t\\tif (blurb.length > 50) {\\n\\t\\t\\tblurb = formBlurb(macro, 23, 0);\\n\\t\\t}\\n\\t\\tcallback(title, blurb, style);\\n\\t}, options);\\n};\\n\\nexports.relink = function(context, macro, text, fromTitle, toTitle, options) {\\n\\tvar entry = varRelinker.relink(macro.name, fromTitle, toTitle, options);\\n\\tif (entry && entry.output) {\\n\\t\\tif (entry.output.search(/[>\\\"'=]/) >= 0) {\\n\\t\\t\\treturn {impossible: true};\\n\\t\\t}\\n\\t\\tif (!macro.attributes) {\\n\\t\\t\\tmacro.attributes = {\\\"$variable\\\": {}};\\n\\t\\t}\\n\\t\\tmacro.attributes['$variable'].value = entry.output;\\n\\t\\tentry.output = macro;\\n\\t}\\n\\treturn entry;\\n};\\n\\nfunction wrapValue(value) {\\n\\tif (!/([\\\\s>\\\"':])/.test(value) && value.length > 0) {\\n\\t\\treturn value;\\n\\t} else if (value.indexOf('\\\"') < 0) {\\n\\t\\treturn '\\\"' + value + '\\\"';\\n\\t} else if (value.indexOf('\\\\'') < 0) {\\n\\t\\treturn '\\\\'' + value + '\\\\'';\\n\\t} else if (value.indexOf(']]') < 0) {\\n\\t\\treturn '[[' + value + ']]';\\n\\t}\\n\\t// I guess just go with the quotes then\\n\\treturn '\\\"' + value + '\\\"';\\n};\\n\\nfunction formBlurb(macro, maxLength, truncLength) {\\n\\tvar blurb = '';\\n\\tfor (var i = 0; i < macro.params.length; i++) {\\n\\t\\tvar param = macro.params[i];\\n\\t\\tvar value = wrapValue(utils.abridgeString(param.value, maxLength, truncLength));\\n\\t\\tblurb += ' ' + (param.name? param.name + ': ': '') + value;\\n\\t}\\n\\treturn blurb;\\n};\\n\",\"module-type\":\"relinkmacrocall\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink-variables/operator.js\":{\"title\":\"$:/plugins/flibbles/relink-variables/operator.js\",\"text\":\"/*\\\\\\nmodule-type: relinkfilteroperator\\ntitle: $:/plugins/flibbles/relink-variables/operator.js\\ntype: application/javascript\\n\\nThis filter operator returns the names of all variables which are exportable by this tiddler. It does not remove duplicates.\\n\\n[[myTiddler]relink:variables[]] -> variables in order of appearance\\n\\n\\\\*/\\n\\nexports.variables = function(source, operator, options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler, title) {\\n\\t\\tif (tiddler && tiddler.fields['module-type'] === \\\"macro\\\") {\\n\\t\\t\\t// This is a javascript module, probably\\n\\t\\t\\tvar module = require(title);\\n\\t\\t\\tif (module && module.name) {\\n\\t\\t\\t\\tresults.push(module.name);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tvar parser = options.wiki.parseTiddler(title);\\n\\t\\t\\tif (parser) {\\n\\t\\t\\t\\t// ptn stands for parseTreeNode\\n\\t\\t\\t\\tvar ptn = parser.tree[0];\\n\\t\\t\\t\\twhile (ptn && (\\n\\t\\t\\t\\tptn.type === \\\"set\\\"\\n\\t\\t\\t\\t|| ptn.type === \\\"parameters\\\"\\n\\t\\t\\t\\t|| ptn.type === \\\"setvariable\\\")) {\\n\\t\\t\\t\\t\\tif (!ptn.isRelinkDefinition\\n\\t\\t\\t\\t\\t&& (ptn.isMacroDefinition\\n\\t\\t\\t\\t\\t || ptn.isFunctionDefinition\\n\\t\\t\\t\\t\\t || ptn.isProcedureDefinition\\n\\t\\t\\t\\t\\t || ptn.isWidgetDefinition)) {\\n\\t\\t\\t\\t\\t\\tvar name = ptn.attributes.name.value;\\n\\t\\t\\t\\t\\t\\tresults.push(name);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tptn = ptn.children && ptn.children[0];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\treturn results;\\n};\\n\",\"module-type\":\"relinkfilteroperator\",\"type\":\"application/javascript\"},\"$:/config/flibbles/relink/operators/function\":{\"title\":\"$:/config/flibbles/relink/operators/function\",\"text\":\"variable\"},\"$:/plugins/flibbles/relink-variables/readme\":{\"title\":\"$:/plugins/flibbles/relink-variables/readme\",\"text\":\"\\\\rules except wikilink\\n\\nSuplemental //Relink// plugins that allows for renaming of both globally defined and local variables through its own TiddlerInfo panel.\\n\"},\"$:/plugins/flibbles/relink-variables/relink.js\":{\"title\":\"$:/plugins/flibbles/relink-variables/relink.js\",\"text\":\"/*\\\\\\nmodule-type: relinkpragma\\ntitle: $:/plugins/flibbles/relink-variables/relink.js\\ntype: application/javascript\\n\\nTakes care of relinking the \\\\relink pragma itself.\\n\\n\\\\*/\\n\\nvar utils = require(\\\"$:/plugins/flibbles/relink/js/utils.js\\\");\\nvar varRelinker = utils.getType('variable');\\nvar Rebuilder = require(\\\"$:/plugins/flibbles/relink/js/utils/rebuilder\\\");\\n\\nexports.name = 'variables';\\n\\nexports.report = function(rule, callback, options) {\\n\\tvar defTiddler = resolveDefiningTiddler(rule, rule.match[1], options);\\n\\tvarRelinker.reportForTitle(rule.match[1], function(title, blurb, style) {\\n\\t\\tcallback(title, \\\"\\\\\\\\relink \\\" + rule.match[2].trim(), style);\\n\\t}, defTiddler);\\n};\\n\\nexports.relink = function(rule, fromTitle, toTitle, options) {\\n\\tvar defTiddler = resolveDefiningTiddler(rule, rule.match[1], options);\\n\\tvar entry = varRelinker.relinkForTitle(rule.match[1], fromTitle, toTitle, defTiddler);\\n\\tif (entry && entry.output) {\\n\\t\\tvar signature =rule.match[0];\\n\\t\\tvar builder = new Rebuilder(signature);\\n\\t\\tvar startOfName = signature.indexOf(rule.match[1], 7);\\n\\t\\tbuilder.add(entry.output, startOfName, startOfName + rule.match[1].length);\\n\\t\\tentry.output = builder.results();\\n\\t}\\n\\treturn entry;\\n};\\n\\nfunction resolveDefiningTiddler(rule, macroName, options) {\\n\\tvar current = options.settings.widget.getVariable('currentTiddler');\\n\\tvar def = options.settings.getMacroDefinition(macroName);\\n\\tif (def && def.tiddler === current) {\\n\\t\\t// The definition for this \\\\relink is in this file, and it's in scope.\\n\\t\\t// This is obviously it.\\n\\t\\treturn current;\\n\\t}\\n\\tvar nextDefRegExp = new RegExp(\\\"\\\\\\\\s*\\\\\\\\\\\\\\\\(?:define|procedure|function|widget)\\\\\\\\s+\\\" + $tw.utils.escapeRegExp(macroName) + \\\"\\\\\\\\(\\\", \\\"mg\\\");\\n\\tnextDefRegExp.lastIndex = rule.parser.pos;\\n\\tvar match = nextDefRegExp.exec(rule.parser.source);\\n\\tif (match && match.index === rule.parser.pos) {\\n\\t\\t// The definition for this pragma comes immediately after this.\\n\\t\\t// That's almost certainly the one.\\n\\t\\treturn current;\\n\\t}\\n\\tif (def && def.tiddler) {\\n\\t\\t// There's a global definition elsewhere.\\n\\t\\t// That may be the one.\\n\\t\\treturn def.tiddler;\\n\\t}\\n\\t// We can't find the definition. It's probably later in this file.\\n\\treturn current;\\n};\\n\",\"module-type\":\"relinkpragma\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink-variables/style.css\":{\"title\":\"$:/plugins/flibbles/relink-variables/style.css\",\"tags\":\"$:/tags/Stylesheet\",\"text\":\".tc-relink-variables {\\n\\ttext-align: left;\\n}\\n\\n.tc-relink-variables > button {\\n\\twidth: 100%;\\n}\\n\\n.tc-relink-variables button:disabled > svg {\\n\\tfill: <<colour very-muted-foreground>>;\\n}\\n\\n.tc-relink-variables button:hover > svg {\\n\\tfill: <<colour tiddler-controls-foreground-hover>>;\\n}\\n\\n.tc-relink-variables button:selected > svg {\\n\\tfill: <<colour tiddler-controls-foreground-selected>>;\\n}\\n\\n.tc-relink-variables-count {\\n\\tcolor: <<color muted-foreground>>;\\n}\\n\"},\"$:/plugins/flibbles/relink-variables/whitelist.js\":{\"title\":\"$:/plugins/flibbles/relink-variables/whitelist.js\",\"text\":\"/*\\\\\\nmodule-type: relinkoperator\\ntitle: $:/plugins/flibbles/relink-variables/whitelist.js\\ntype: application/javascript\\n\\nUpdate the Relink whitelist for macro parameters.\\n\\\\*/\\n\\nvar utils = require(\\\"$:/plugins/flibbles/relink/js/utils.js\\\");\\nvar varRelinker = utils.getType('variable');\\nvar prefix = '$:/config/flibbles/relink/macros/';\\n\\nexports.name = 'variable';\\n\\nexports.report = function(tiddler, callback, options) {\\n\\tvar title = tiddler.fields.title;\\n\\tif (title.substr(0, prefix.length) === prefix) {\\n\\t\\tvar key = title.substr(prefix.length);\\n\\t\\tvar name = dir(key);\\n\\t\\tvar macroParam = key.substr(name.length+1);\\n\\t\\tvarRelinker.report(name, function(title, blurb, style) {\\n\\t\\t\\tvar type = tiddler.fields.text;\\n\\t\\t\\tcallback(title, \\\"#relink \\\" + macroParam + ':' + type, style);\\n\\t\\t}, options);\\n\\t}\\n};\\n\\nexports.relink = function(tiddler, fromTitle, toTitle, changes, options) {\\n\\tvar title = tiddler.fields.title;\\n\\tif (title.substr(0, prefix.length) === prefix) {\\n\\t\\tvar key = title.substr(prefix.length);\\n\\t\\tvar name = dir(key);\\n\\t\\tvar entry = varRelinker.relink(name, fromTitle, toTitle, options);\\n\\t\\tif (entry) {\\n\\t\\t\\tif (entry.output) {\\n\\t\\t\\t\\tentry.output = prefix + entry.output + key.substr(name.length);\\n\\t\\t\\t}\\n\\t\\t\\tchanges.title = entry;\\n\\t\\t}\\n\\t}\\n};\\n\\n/* Returns all but the last bit of a path. path/to/tiddler -> path/to\\n */\\nfunction dir(string) {\\n    var index = string.lastIndexOf('/');\\n    if (index >= 0) {\\n        return string.substr(0, index);\\n    }\\n};\\n\",\"module-type\":\"relinkoperator\",\"type\":\"application/javascript\"}}}"}
