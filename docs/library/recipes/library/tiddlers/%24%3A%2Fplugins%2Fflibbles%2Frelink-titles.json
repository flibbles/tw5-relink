{"name":"Relink Titles",
"title":"$:/plugins/flibbles/relink-titles",
"description":"Renames tiddlers with titles derived from Relinked tiddler",
"author":"Flibbles",
"version":"1.10.2",
"core-version":">=5.1.14",
"parent-plugin":"$:/plugins/flibbles/relink",
"source":"https://github.com/flibbles/tw5-relink",
"demo":"http://flibbles.github.io/tw5-relink/",
"list":"readme configuration",
"dependents":"",
"plugin-type":"plugin",
"type":"application/json",
"text":"{\n    \"tiddlers\": {\n        \"$:/config/flibbles/relink-titles/custom\": {\n            \"title\": \"$:/config/flibbles/relink-titles/custom\",\n            \"text\": \"\"\n        },\n        \"$:/plugins/flibbles/relink-titles/configuration\": {\n            \"title\": \"$:/plugins/flibbles/relink-titles/configuration\",\n            \"caption\": \"{{$:/plugins/flibbles/relink-titles/language/Caption}}\",\n            \"tags\": \"$:/tags/flibbles/relink/Configuration\",\n            \"text\": \"\\\\define lingo-base() $:/plugins/flibbles/relink-titles/language/\\n\\\\define customTiddler() $:/config/flibbles/relink-titles/custom\\n\\n<<lingo Help>>\\n\\n<table>\\n<tbody>\\n<$list filter=\\\"[[$:/tags/flibbles/relink-titles/Filter]tagging[]]\\\">\\n<tr>\\n<td>\\n<$checkbox\\n\\ttiddler={{{ [all[current]addprefix[$:/config/flibbles/relink-titles/disabled/]] }}}\\n\\tfield=\\\"text\\\"\\n\\tchecked=\\\"enabled\\\"\\n\\tunchecked=\\\"disabled\\\"\\n\\tdefault=\\\"enabled\\\"\\n> ''{{!!caption}}''</$checkbox></td><td>\\n\\n<$transclude />\\n\\n</td></tr></$list>\\n</tbody></table>\\n\\n!!! <<lingo Custom/Caption>>\\n\\n<<lingo Hint>>\\n<$edit tag=\\\"textarea\\\" tiddler=<<customTiddler>> class=\\\"tc-edit-texteditor\\\"/>\\n\\n<!-- We want to sanity check the custom tiddler, but we can only do it on\\n     Tiddlywiki versions that support \\\"subfilter\\\". So first two filter steps\\n     confirm that subfilter isn't just a field:subfilter[] operator. -->\\n<$vars\\n\\tfromTiddler=\\\"testTiddler\\\"\\n\\ttoTiddler=\\\"testTiddler\\\">\\n<$list\\n\\tvariable=\\\"erroneousTiddler\\\"\\n\\tfilter=\\\"[subfilter<customTiddler>field:title<customTiddler>subfilter{$:/config/flibbles/relink-titles/custom}]\\\" >\\n\\n{{$:/core/images/warning}} <<lingo Warning>>\\n</$list></$vars>\\n\"\n        },\n        \"$:/plugins/flibbles/relink-titles/configuration/filters/directory\": {\n            \"title\": \"$:/plugins/flibbles/relink-titles/configuration/filters/directory\",\n            \"caption\": \"{{$:/plugins/flibbles/relink-titles/language/Directory/Caption}}\",\n            \"filter\": \"[removeprefix<fromTiddler>prefix[/]addprefix<toTiddler>]\",\n            \"tags\": \"$:/tags/flibbles/relink-titles/Filter\",\n            \"text\": \"{{$:/plugins/flibbles/relink-titles/language/Directory/Description}}\\n\"\n        },\n        \"$:/plugins/flibbles/relink-titles/language/Caption\": {\n            \"title\": \"$:/plugins/flibbles/relink-titles/language/Caption\",\n            \"text\": \"Titles\"\n        },\n        \"$:/plugins/flibbles/relink-titles/language/Custom/Caption\": {\n            \"title\": \"$:/plugins/flibbles/relink-titles/language/Custom/Caption\",\n            \"text\": \"Custom\"\n        },\n        \"$:/plugins/flibbles/relink-titles/language/Directory/Caption\": {\n            \"title\": \"$:/plugins/flibbles/relink-titles/language/Directory/Caption\",\n            \"text\": \"Rename subdirectories\"\n        },\n        \"$:/plugins/flibbles/relink-titles/language/Directory/Description\": {\n            \"title\": \"$:/plugins/flibbles/relink-titles/language/Directory/Description\",\n            \"text\": \"For wikis set up hierarchically using `/`, like a filesystem. This option will update all tiddlers nested inside the target tiddler. i.e. `fromTiddler/path/file` becomes `toTiddler/path/file`.\"\n        },\n        \"$:/plugins/flibbles/relink-titles/language/Prefix/Caption\": {\n            \"title\": \"$:/plugins/flibbles/relink-titles/language/Prefix/Caption\",\n            \"text\": \"prefix for $:/prefix\"\n        },\n        \"$:/plugins/flibbles/relink-titles/language/Help\": {\n            \"title\": \"$:/plugins/flibbles/relink-titles/language/Help\",\n            \"text\": \"See the <a href={{{ [{$:/plugins/flibbles/relink-titles!!demo}addsuffix[#Plugins/Titles]] }}}>//Relink-titles// documentation page</a> for details.\"\n        },\n        \"$:/plugins/flibbles/relink-titles/language/Hint\": {\n            \"title\": \"$:/plugins/flibbles/relink-titles/language/Hint\",\n            \"text\": \"The variables `fromTiddler` and `toTiddler` are defined as what the triggering relinked tiddler was and will be called.\"\n        },\n        \"$:/plugins/flibbles/relink-titles/language/Warning\": {\n            \"title\": \"$:/plugins/flibbles/relink-titles/language/Warning\",\n            \"text\": \"''Warning:'' This filter appears unsafe. It seems to indiscriminately change tiddlers into ''<$text text=<<erroneousTiddler>> />'', and it will probably be thrown out.\"\n        },\n        \"$:/plugins/flibbles/relink-titles/readme\": {\n            \"title\": \"$:/plugins/flibbles/relink-titles/readme\",\n            \"text\": \"Highly customizable relinking of tiddler titles //related// to the renamed tiddler.\\n\\n* Rename a hierarchy of subtiddlers when renaming a root tiddler.\\n* Make custom filter rules to rename other tiddlers the way you want when Relinking.\\n* Integrates with other plugins for plugin-specific rules.\\n\\nSee <a href={{$:/plugins/flibbles/relink-titles!!source}}>the tw5-relink website</a> for more details and examples.\\n\\n{{$:/core/images/warning}} ''Warning:'' You must use //Relink// v1.10.2 or greater with this, or this plugin may delete some tiddler bodies while trying to relink titles.\\n\"\n        },\n        \"$:/plugins/flibbles/relink-titles/relinkoperations/title.js\": {\n            \"title\": \"$:/plugins/flibbles/relink-titles/relinkoperations/title.js\",\n            \"text\": \"/*\\\\\\nmodule-type: relinkoperator\\ntitle: $:/plugins/flibbles/relink-titles/relinkoperations/title.js\\ntype: application/javascript\\n\\nRenames tiddlers which have titles derived from fromTitle. Then it makes\\nsure that those tiddlers are properly relinked too.\\n\\n\\\\*/\\n\\n/*jslint node: false, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar customFilterTiddler = \\\"$:/config/flibbles/relink-titles/custom\\\";\\nvar filterTag = \\\"$:/tags/flibbles/relink-titles/Filter\\\";\\nvar configPrefix = \\\"$:/config/flibbles/relink-titles/disabled/\\\";\\nvar EntryNode = require('$:/plugins/flibbles/relink/js/utils/entry');\\n\\nvar TitleEntry = EntryNode.newType(\\\"title\\\");\\n\\nTitleEntry.prototype.report = function() {\\n\\treturn [\\\"title: \\\" + this.title];\\n};\\n\\nexports['title'] = function(tiddler, fromTitle, toTitle, changes, options) {\\n\\tvar cache = getCache(fromTitle, toTitle, options);\\n\\tif (!cache.touched[tiddler.fields.title]) {\\n\\t\\tvar filters = cache.filters;\\n\\t\\tvar widget = cache.widget;\\n\\t\\tfor (var i = 0; i < filters.length; i++) {\\n\\t\\t\\tvar filter = filters[i];\\n\\t\\t\\tvar output = filter.call(options.wiki, [tiddler.fields.title], widget);\\n\\t\\t\\tvar result = output[0];\\n\\t\\t\\tif (result && (result !== tiddler.fields.title || fromTitle === toTitle)) {\\n\\t\\t\\t\\tvar entry = new TitleEntry();\\n\\t\\t\\t\\tentry.title = tiddler.fields.title;\\n\\t\\t\\t\\tif (fromTitle !== toTitle && (options.wiki.getTiddler(result) || cache.touched[result])) {\\n\\t\\t\\t\\t\\t// There's already a tiddler there. We won't clobber it.\\n\\t\\t\\t\\t\\tentry.impossible = true;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tentry.output = result;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tchanges.title = entry;\\n\\t\\t\\t\\t// Record that we've touched this one, so we only touch it once.\\n\\t\\t\\t\\t// Both its prior and latter. Neither should be touched again.\\n\\t\\t\\t\\tcache.touched[tiddler.fields.title] = true;\\n\\t\\t\\t\\tcache.touched[result] = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n};\\n\\nfunction getCache(fromTitle, toTitle, options) {\\n\\tif (!options.__titlesCache) {\\n\\t\\t// we cache the dummy widget, the filters, and the touch list\\n\\t\\t// in the options, so we only need to do this all once for\\n\\t\\t// for an entire relink operation\\n\\t\\tvar widget = getWidget(fromTitle, toTitle, options);\\n\\t\\toptions.__titlesCache = {\\n\\t\\t\\twidget: widget,\\n\\t\\t\\tfilters: getFilters(widget, options),\\n\\t\\t\\ttouched: Object.create(null)\\n\\t\\t};\\n\\t}\\n\\treturn options.__titlesCache;\\n};\\n\\nfunction getWidget(fromTitle, toTitle, options) {\\n\\tvar parentWidget = options.wiki.makeWidget();\\n\\tparentWidget.setVariable('fromTiddler', fromTitle);\\n\\tparentWidget.setVariable('toTiddler', toTitle);\\n\\treturn options.wiki.makeWidget(null, {parentWidget: parentWidget});\\n};\\n\\nfunction getFilters(widget, options) {\\n\\tvar subFilters = [];\\n\\t$tw.utils.each(options.wiki.getTiddlersWithTag(filterTag), function(title) {\\n\\t\\tvar filter = getPresetFilter(title, options);\\n\\t\\tif (filter) {\\n\\t\\t\\tsubFilters.push(filter);\\n\\t\\t}\\n\\t});\\n\\tvar filter = getCustomFilter(widget, options);\\n\\tif (filter) {\\n\\t\\tsubFilters.push(filter);\\n\\t}\\n\\treturn subFilters;\\n};\\n\\nfunction getCustomFilter(widget, options) {\\n\\treturn options.wiki.getCacheForTiddler(customFilterTiddler, \\\"relinkFilter\\\", function() {\\n\\t\\tvar tiddler = options.wiki.getTiddler(customFilterTiddler);\\n\\t\\tif (tiddler && tiddler.fields.text) {\\n\\t\\t\\tvar filter = options.wiki.compileFilter(tiddler.fields.text);\\n\\t\\t\\t// We sanity test the custom filter. Make sure it wouldn't change\\n\\t\\t\\t// itself.\\n\\t\\t\\tvar testOutput = filter.call(options.wiki, [customFilterTiddler], widget);\\n\\t\\t\\tif (testOutput.length == 0) {\\n\\t\\t\\t\\treturn filter;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn null;\\n\\t});\\n};\\n\\nfunction getPresetFilter(title, options) {\\n\\tvar configTiddler = options.wiki.getTiddler(configPrefix + title);\\n\\tif (configTiddler && configTiddler.fields.text === \\\"disabled\\\") {\\n\\t\\treturn null;\\n\\t}\\n\\treturn options.wiki.getCacheForTiddler(title, \\\"relinkFilter\\\", function() {\\n\\t\\tvar tiddler = options.wiki.getTiddler(title);\\n\\t\\tif (tiddler && tiddler.fields.filter) {\\n\\t\\t\\treturn options.wiki.compileFilter(tiddler.fields.filter);\\n\\t\\t} else {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t});\\n};\\n\",\n            \"module-type\": \"relinkoperator\",\n            \"type\": \"application/javascript\"\n        }\n    }\n}"}
